<!--

minha duvida aqui era entender oque estava sendo passado como argumento, criado, reutilizado ou declarado.
isso me deixava muito confuso por conta que eu via muitos nomes iguais e não sabia oque estava acontecendo.




Como entender o que está sendo criado, reutilizado, passado ou declarado no JavaScript:

Essa anotação vai me ajudar a entender com clareza quando você está:

Criando algo novo
Pegando algo já existente
Reutilizando nomes
Passando dados como argumentos
E quando nomes iguais significam coisas diferentes!



---

1. Tudo que está com const, let ou var está sendo CRIADO

const idade = 20; // criou uma variável chamada idade


---

2. Quando a função tem um PARÂMETRO com o mesmo nome, ela está criando uma variável interna

function mostrarNome(usuario) {
    console.log(usuario); // esse 'usuario' é o da função, NÃO o de fora
}

> Dica: o que vem entre os parênteses da função é uma nova variável temporária 
(um parâmetro). Ela só existe dentro da função.




---

3. Se você usa o nome SEM let, const, function etc., você está PEGANDO algo já existente

console.log(usuario); // pegando a variável que já foi criada antes


---

4. Dentro de objetos: antes dos dois-pontos é o NOME da propriedade. 
Depois dos dois-pontos pode ser qualquer valor

const nome = 'Mikael';

const usuario = {
    nome: nome // propriedade 'nome' recebe o valor da variável 'nome'
};

// forma simplificada:
const usuario = { nome }; // mesma coisa que nome: nome


---

5. Em Arrays ou Objetos, você sempre PEGA valores usando [] ou .

array[0]        // pegando o primeiro item do array
objeto.nome     // pegando o valor da propriedade 'nome'

> Forma simplificada do array: quando você faz algo tipo const [a, b] = array, isso chama desestruturação. Você está pegando posições específicas do array direto em variáveis.



Exemplo:

const valores = [10, 20, 30];
const [primeiro, segundo] = valores;

console.log(primeiro); // 10
console.log(segundo);  // 20


---

6. Nome repetido? Olhe o CONTEXTO (o ESCOPO)

const produto = 'Camisa';

function atualizarProduto(produto) {
  produto = produto + ' Estampada';
  console.log(produto); // 'Camisa Estampada'
}

atualizarProduto(produto);
console.log(produto); // 'Camisa'

> Explicação:



produto (fora da função) é 'Camisa'

Dentro da função, o produto é um novo nome temporário (parâmetro)

Você está modificando só o interno

O produto de fora continua igual


Dica de ouro: se tiver dúvida, mude o nome da variável da função, tipo:

function atualizarProduto(produtoRecebido) {
  let novoProduto = produtoRecebido + ' Estampada';
  console.log(novoProduto);
}

Fica muito mais claro.


---

7. Como identificar quando algo está sendo passado como argumento

Olha esse exemplo:

function saudacao(nome) {
    console.log('Olá, ' + nome);
}

saudacao('Mikael');

Aqui, 'Mikael' está sendo passado como argumento para a função.
Ou seja:

'Mikael' vai entrar na função e ser usado como valor da variável nome.


> Dica prática: se algo aparece dentro dos parênteses na hora de chamar uma função → é argumento.
funcao(aquiVaiOArgumento);


---

Resumo visual com palavras simples:

Situação	O que está acontecendo

const x = ...	Criando uma variável
function(x) {}	Criando um parâmetro temporário
console.log(x)	Pegando uma variável existente
obj = { nome: nome }	Propriedade recebendo uma variável
funcao(x)	Passando valor como argumento
obj.propriedade ou arr[i]	Pegando dados de objeto ou array



-->